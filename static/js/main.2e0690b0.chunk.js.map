{"version":3,"sources":["mlh-prep.png","Components/ErrorComponent.js","Components/ResultsComponent.js","Components/SearchComponent.js","Components/RequiredItem.js","assets/img/cap.png","assets/img/gloves.png","assets/img/jacket.png","assets/img/raincoat.png","assets/img/scarf.png","assets/img/sunglasses.png","assets/img/suncream.png","assets/img/umbrella.png","assets/img/water_proof_boots.png","Components/RequiredItems.js","Hooks/useLocation.js","Components/GetMyLocationButton.js","Components/Map.js","Components/App.js","index.js"],"names":["ErrorComponent","error","message","ResultsComponent","isLoaded","results","className","console","log","weather","main","feels_like","name","sys","country","SearchComponent","city","changeCity","type","value","onChange","event","target","RequiredItem","img_src","src","alt","RequiredItems","weatherKind","items","RainCoat","WaterProofBoots","Umbrella","SunGlasses","Gloves","Jacket","Scarf","Cap","SunCream","undefined","map","ele","index","useLocation","userCoords","setUserCoords","useState","success","pos","coords","latitude","longitude","warn","useEffect","navigator","geolocation","getCurrentPosition","SearchMyLocationButton","getUserLocation","onClick","Map","setIsLoaded","setResults","setError","mapContainer","useRef","lng","setLng","lat","setLat","zoom","setZoom","current","mapboxgl","container","style","center","on","e","fetch","lngLat","process","REACT_APP_APIKEY","then","res","json","result","ref","App","setCity","geolocateUser","logo","length","accessToken","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e0690b0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mlh-prep.270f6887.png\";","\nexport default function ErrorComponent({error}) {\n  return (\n    <div>Error: {error.message}</div>\n  )\n}","\nexport default function ResultsComponent({isLoaded, results}) {\n\n  return (\n      <div className=\"Results\">\n        {!isLoaded && <h2>Loading...</h2>}\n        {console.log(results)}\n        {isLoaded && results && <>\n          <h3>{results.weather[0].main}</h3>\n          <p>Feels like {results.main.feels_like}Â°C</p>\n          <i><p>{results.name}, {results.sys.country}</p></i>\n        </>}\n      </div>\n  )\n}\n","\nexport default function SearchComponent({city, changeCity}) {\n\n    return (\n        <input\n          type=\"text\"\n          value={city}\n          onChange={event => changeCity(event.target.value)} />\n    )\n}","const RequiredItem = ({img_src}) => {\n    return (\n        <div className=\"card\">\n            <img src={img_src} alt=\"required item\" />\n        </div>\n    )\n}\n\nexport default RequiredItem\n","export default __webpack_public_path__ + \"static/media/cap.474e6898.png\";","export default __webpack_public_path__ + \"static/media/gloves.45497ed2.png\";","export default __webpack_public_path__ + \"static/media/jacket.58fadea5.png\";","export default __webpack_public_path__ + \"static/media/raincoat.376a8ef2.png\";","export default __webpack_public_path__ + \"static/media/scarf.fbb31feb.png\";","export default __webpack_public_path__ + \"static/media/sunglasses.6c5f1538.png\";","export default __webpack_public_path__ + \"static/media/suncream.d8793979.png\";","export default __webpack_public_path__ + \"static/media/umbrella.df170598.png\";","export default __webpack_public_path__ + \"static/media/water_proof_boots.a48e94f8.png\";","import RequiredItem from './RequiredItem'\nimport Cap from '../assets/img/cap.png'\nimport Gloves from '../assets/img/gloves.png' \nimport Jacket from '../assets/img/jacket.png'\nimport RainCoat from '../assets/img/raincoat.png' \nimport Scarf from '../assets/img/scarf.png' \nimport SunGlasses from '../assets/img/sunglasses.png' \nimport SunCream from '../assets/img/suncream.png' \nimport Umbrella from '../assets/img/umbrella.png' \nimport WaterProofBoots from '../assets/img/water_proof_boots.png' \n\nconst RequiredItems = ({ weatherKind }) => {\n\n    const items = {\n        'Rain': [RainCoat, WaterProofBoots, Umbrella],\n        'Snow': [SunGlasses, Gloves, Jacket, Scarf],\n        'Clear': [SunGlasses, Cap, SunCream]\n    }\n\n    return (\n        <>\n            {items[weatherKind] !== undefined && items[weatherKind].map((ele, index) => { \n                return <RequiredItem img_src={ele} key={index} />})}\n        </>\n    )\n}\n\nexport default RequiredItems\n","import { useState, useEffect } from \"react\";\n\nconst useLocation = () => {\n  const [userCoords, setUserCoords] = useState([]);\n  \n  const success = (pos) => {\n    setUserCoords([pos.coords.latitude, pos.coords.longitude])\n  }\n\n  const error = (error) => {\n    console.warn(error);\n  }\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(success, error)\n  }, []);\n\n  return userCoords;\n};\n\nexport default useLocation;","export default function SearchMyLocationButton({getUserLocation}) {\n    return (\n      <button onClick={getUserLocation}>Get My Location</button>\n    )\n  }","import { useEffect, useState, useRef } from \"react\";\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax \n\nmapboxgl.accessToken = 'pk.eyJ1Ijoicm95Z2JldiIsImEiOiJjbDFjYzF2ajUwMHgzM2NwcXBzdWVxM3ZvIn0.2k8N-UN2Y7ZdT5vwml9QAw';\n\nexport default function Map({ setIsLoaded, setResults, setError }) {\n    const mapContainer = useRef(null);\n    const map = useRef(null);\n    const [lng, setLng] = useState(-70.9);\n    const [lat, setLat] = useState(42.35);\n    const [zoom, setZoom] = useState(9);\n\n    useEffect(() => { // mapbox\n    if (map.current) return; // initialize map only once\n\n    map.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [lng, lat],\n        zoom: zoom\n    });\n\n    map.current.on('click', (e) => {\n        fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${e.lngLat.lat}&lon=${e.lngLat.lng}&units=metric&appid=${process.env.REACT_APP_APIKEY}`)\n        .then(res => res.json())\n        .then(\n        (result) => {\n            if (result['cod'] !== 200) {\n            setIsLoaded(false)\n            } else {\n            setIsLoaded(true);\n            setResults(result);\n            }\n        },\n        (error) => {\n            setIsLoaded(true);\n            setError(error);\n        }\n        )\n    });\n    }, []);\n\n    return (\n        <>\n          <div ref={mapContainer} className=\"map-container\" />\n        </>\n    )\n}","import { useEffect, useState } from \"react\";\nimport '../App.css';\nimport logo from '../mlh-prep.png';\nimport ErrorComponent from \"./ErrorComponent\";\nimport ResultsComponent from \"./ResultsComponent\";\nimport SearchComponent from \"./SearchComponent\";\nimport RequiredItems from \"./RequiredItems\";\nimport useLocation from \"../Hooks/useLocation\";\nimport GetMyLocationButton from \"./GetMyLocationButton\";\nimport Map from \"./Map\";\n\nexport default function App() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [city, setCity] = useState(\"New York City\")\n  const [results, setResults] = useState(null);\n\n  const geolocateUser = useLocation();\n\n  // Fetch data based on geolocation\n  function getUserLocation() {\n    if (geolocateUser.length !== 0) {\n      fetch(`http://api.openweathermap.org/geo/1.0/reverse?lat=${geolocateUser[0]}&lon=${geolocateUser[1]}&limit=1&appid=${process.env.REACT_APP_APIKEY}`)\n        .then(res => res.json())\n        .then(\n          (result) => {\n            setCity(result[0].name);\n          },\n          (error) => {\n            setIsLoaded(true);\n            setError(error);\n          }\n        )\n    }\n  }\n\n  // Fetch data based on user input\n  useEffect(() => { // weather\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${process.env.REACT_APP_APIKEY}`)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          if (result['cod'] !== 200) {\n            setIsLoaded(false)\n          } else {\n            setIsLoaded(true);\n            setResults(result);\n          }\n        },\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [city])\n\n  if (error) {\n    return <ErrorComponent error={error} />;\n  } else {\n    return (\n      <>\n        <div>\n          <img className=\"logo\" src={logo} alt=\"MLH Prep Logo\"></img>\n          <h2>Enter a city below ð</h2>\n          <SearchComponent city={city} changeCity={setCity} />\n          <GetMyLocationButton getUserLocation={getUserLocation}/>\n          <ResultsComponent isLoaded={isLoaded} results={results}/>\n          {isLoaded && results && <RequiredItems weatherKind={results.weather[0].main} />}\n          <Map setIsLoaded={setIsLoaded} setResults={setResults} setError={setError} />\n        </div>\n      </>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\nimport './index.css';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}